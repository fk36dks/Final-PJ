pipeline {
  agent any
  environment {
    AWS_REGION         = 'ap-northeast-2'
    ACCOUNT_ID         = '335507813633'
    // 전체 경로 그대로 유지 (sed, push에서 사용)
    ECR_REPO           = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/shop-backend"
    IMG_TAG            = "${env.BUILD_NUMBER}"
    AWS_CREDENTIALS_ID = 'AWS-DY'

    // ✅ Docker Hub 추가
    DOCKERHUB_REPO           = 'fk36dks/shop-backend'      // <user>/<repo>
    DOCKERHUB_CREDENTIALS_ID = 'dockerhub-https'           // Jenkins에 만든 그 ID

    // ✅ Slack 알림용
    SLACK_CHANNEL      = '#ci-cd'
    SLACK_CREDENTIALS  = 'slack-token'
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/fk36dks/Final-PJ.git'
      }
    }

    stage('Guard: skip self-commit/manifests-only') {
      steps {
        script {
          env.SKIP_BUILD = "false"
          def author  = sh(script: "git log -1 --pretty=%an", returnStdout: true).trim()
          if (author == 'jenkins-bot') { env.SKIP_BUILD = "true" }
          def diffCmd = '''
            if git rev-parse HEAD^ >/dev/null 2>&1; then
              git diff --name-only HEAD^ HEAD
            else
              echo ""
            fi
          '''
          def changed = sh(script: diffCmd, returnStdout: true).trim()
          if (changed && changed.split("\\n").every{ it.startsWith('manifests/') }) {
            env.SKIP_BUILD = "true"
          }
          echo "Guard check -> author=${author}, skip=${env.SKIP_BUILD}"
        }
      }
    }

    stage('Build Backend Image') {
      when { expression { env.SKIP_BUILD != 'true' } }
      steps {
        sh '''
          set -euxo pipefail
          docker build -t ${ECR_REPO}:${IMG_TAG} ./backend
          docker tag ${ECR_REPO}:${IMG_TAG} ${ECR_REPO}:latest
        '''
      }
    }

    stage('Push to ECR & Docker Hub') {
      when { expression { env.SKIP_BUILD != 'true' } }
      steps {
        // ECR 로그인 & 푸시
        withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${AWS_REGION}") {
          sh '''
            set -euxo pipefail
            aws ecr describe-repositories --repository-names "${ECR_REPO##*/}" >/dev/null 2>&1 || \
              aws ecr create-repository --repository-name "${ECR_REPO##*/}"

            aws ecr get-login-password --region ${AWS_REGION} \
              | docker login --username AWS --password-stdin ${ECR_REPO%/*}

            docker push ${ECR_REPO}:${IMG_TAG}
            docker push ${ECR_REPO}:latest
          '''
        }

        // Docker Hub 로그인 & 푸시
        withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DH_USER', passwordVariable: 'DH_PAT')]) {
          sh '''
            set -euxo pipefail
            echo "$DH_PAT" | docker login -u "$DH_USER" --password-stdin docker.io

            docker tag ${ECR_REPO}:${IMG_TAG} docker.io/${DOCKERHUB_REPO}:${IMG_TAG}
            docker tag ${ECR_REPO}:${IMG_TAG} docker.io/${DOCKERHUB_REPO}:latest

            docker push docker.io/${DOCKERHUB_REPO}:${IMG_TAG}
            docker push docker.io/${DOCKERHUB_REPO}:latest

            docker logout docker.io || true
          '''
        }
      }
    }

    stage('Update Manifests (GitOps)') {
      when { expression { env.SKIP_BUILD != 'true' } }
      steps {
        lock(resource: 'manifests-main-push') {
          dir('manifests') {
            withCredentials([usernamePassword(credentialsId: 'github-https', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
              sh '''
                set -euxo pipefail
                git remote set-url origin https://github.com/fk36dks/Final-PJ.git
                git fetch --all --prune
                git checkout -B main origin/main

                # backend 이미지 태그를 ECR 경로+빌드번호로 고정
                sed -Ei 's|^([[:space:]]*)image:.*shop-backend.*$|\\1image: '"${ECR_REPO}:${IMG_TAG}"'|' backend-deployment.yaml

                git config user.email "ci-bot@finalproject.com"
                git config user.name  "jenkins-bot"

                git add backend-deployment.yaml
                if ! git diff --cached --quiet; then
                  git commit -m "[skip ci] ci(backend): ${IMG_TAG} -> ${ECR_REPO}:${IMG_TAG}"
                else
                  echo "No changes to commit"
                  exit 0
                fi

                git pull --rebase origin main || true
                git push https://${GIT_USER}:${GIT_TOKEN}@github.com/fk36dks/Final-PJ.git HEAD:main
              '''
            }
          }
        }
      }
    }
  }

  post {
    always {
      sh '''
        docker logout ${ECR_REPO%/*} || true
      '''
      cleanWs()
    }
    success {
      slackSend(channel: "${SLACK_CHANNEL}",
                message: "✅ Backend Build Success: ${JOB_NAME} #${BUILD_NUMBER}",
                tokenCredentialId: "${SLACK_CREDENTIALS}")
    }
    failure {
      slackSend(channel: "${SLACK_CHANNEL}",
                message: "❌ Backend Build Failed: ${JOB_NAME} #${BUILD_NUMBER}",
                tokenCredentialId: "${SLACK_CREDENTIALS}")
    }
  }
}

