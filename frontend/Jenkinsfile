pipeline {
  agent any
  environment {
    AWS_REGION         = 'ap-northeast-2'
    ACCOUNT_ID         = '335507813633'
    ECR_REGISTRY       = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    ECR_REPO           = "${ECR_REGISTRY}/shop-frontend"
    IMG_TAG            = "${env.BUILD_NUMBER}"          // GitOps 방법 A: 태그=빌드번호
    AWS_CREDENTIALS_ID = 'AWS-DY'                       // ✅ Jenkins 글로벌 크리덴셜 ID
    GIT_CREDENTIALS_ID = 'github-https'
    GIT_BRANCH         = 'main'
  }

  options {
    disableConcurrentBuilds()
    timestamps()
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: "${env.GIT_BRANCH}", credentialsId: "${env.GIT_CREDENTIALS_ID}", url: 'https://github.com/fk36dks/Final-PJ.git'
      }
    }

    stage('Guard: skip self-commit/manifests-only') {
      steps {
        script {
          env.SKIP_BUILD = "false"
          def author  = sh(script: "git log -1 --pretty=%an", returnStdout: true).trim()
          if (author == 'jenkins-bot') { env.SKIP_BUILD = "true" }

          // 최근 커밋 변경 파일 목록(첫 빌드 예외 처리)
          def diffCmd = '''
            set -e
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              git diff --name-only HEAD~1..HEAD
            else
              echo "__FIRST_BUILD__"
            fi
          '''
          def changed = sh(script: diffCmd, returnStdout: true).trim().split("\\r?\\n") as List
          if (!changed.contains("__FIRST_BUILD__")) {
            def onlyManifests = changed.every { it.startsWith('manifests/') }
            if (onlyManifests) {
              env.SKIP_BUILD = "true"
            }
          }

          echo "SKIP_BUILD=${env.SKIP_BUILD}"
        }
      }
    }

    stage('Login to ECR') {
      when { expression { env.SKIP_BUILD != "true" } }
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS_ID}"]]) {
          sh """
            aws --version
            aws ecr get-login-password --region ${AWS_REGION} \
              | docker login --username AWS --password-stdin ${ECR_REGISTRY}
          """
        }
      }
    }

    stage('Build image') {
      when { expression { env.SKIP_BUILD != "true" } }
      steps {
        dir('frontend') {
          sh """
            docker build --build-arg BUILD_TAG=${IMG_TAG} -t ${ECR_REPO}:${IMG_TAG} .
          """
        }
      }
    }

    stage('Push image') {
      when { expression { env.SKIP_BUILD != "true" } }
      steps {
        sh "docker push ${ECR_REPO}:${IMG_TAG}"
      }
    }

    stage('Update manifests (image tag -> BUILD_NUMBER)') {
      when { expression { env.SKIP_BUILD != "true" } }
      steps {
        withCredentials([usernamePassword(credentialsId: "${env.GIT_CREDENTIALS_ID}", usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
          sh """
            set -e

            # workspace trust (잠재적 안전성 경고 방지)
            git config --global --add safe.directory "${WORKSPACE}" || true

            # 이미지 태그 치환
            sed -ri "s#(image:\\s*${ECR_REPO}:).*#\\1${IMG_TAG}#g" manifests/frontend-deployment.yaml

            git config user.name  "jenkins-bot"
            git config user.email "jenkins-bot@local"
            git add manifests/frontend-deployment.yaml || true

            # 변경이 있을 때만 커밋
            if ! git diff --cached --quiet; then
              git commit -m "chore(frontend): update image tag to ${IMG_TAG} [ci skip? false]"
            else
              echo "No manifest changes to commit."
            fi

            # 원격 갱신 후 푸시 (토큰 포함 URL 사용)
            git pull --rebase https://${GIT_USER}:${GIT_TOKEN}@github.com/fk36dks/Final-PJ.git ${GIT_BRANCH} || true

            # 커밋이 없어도 push는 무해(업데이트 없으면 no-op)
            git push https://${GIT_USER}:${GIT_TOKEN}@github.com/fk36dks/Final-PJ.git ${GIT_BRANCH}
          """
        }
      }
    }
  }

  post {
    always {
      sh 'docker image prune -f || true'
    }
  }
}

